import java.net.*
import java.math.*

System.println(
"REM                                                                                                           \n" + 
"REM I8,        8        ,8I  88                                                                ad88           \n" + 
"REM `8b       d8b       d8'  \"\"                                                               d8\"      ,d     \n" + 
"REM  \"8,     ,8\"8,     ,8\"                                                                    88       88     \n" + 
"REM   Y8     8P Y8     8P    88  ,adPPYba,   ,adPPYba,   ,adPPYba,  8b,dPPYba,  ,adPPYYba,  MM88MMM  MM88MMM  \n" + 
"REM   `8b   d8' `8b   d8'    88  I8[    \"\"  a8P_____88  a8\"     \"\"  88P'   \"Y8  \"\"     `Y8    88       88     \n" + 
"REM    `8a a8'   `8a a8'     88   `\"Y8ba,   8PP\"\"\"\"\"\"\"  8b          88          ,adPPPPP88    88       88     \n" + 
"REM     `8a8'     `8a8'      88  aa    ]8I  \"8b,   ,aa  \"8a,   ,aa  88          88,    ,88    88       88,    \n" + 
"REM      `8'       `8'       88  `\"YbbdP\"'   `\"Ybbd8\"'   `\"Ybbd8\"'  88          `\"8bbdP\"Y8    88       \"Y888  \n" + 
"REM                                                                                                           \n" + 
"REM                                                                                                           \n" + 
"REM                                                                                                           \n" + 
"REM                                                           88888888ba                88  88           88   \n" + 
"REM                                                           88      \"8b               \"\"  88           88   \n" + 
"REM                                                           88      ,8P                   88           88   \n" + 
"REM                                                           88aaaaaa8P'  88       88  88  88   ,adPPYb,88   \n" + 
"REM                                                           88\"\"\"\"\"\"8b,  88       88  88  88  a8\"    `Y88   \n" + 
"REM                                                           88      `8b  88       88  88  88  8b       88   \n" + 
"REM                                                           88      a8P  \"8a,   ,a88  88  88  \"8a,   ,d88   \n" + 
"REM                                                           88888888P\"    `\"YbbdP'Y8  88  88   `\"8bbdP\"Y8   \n" + 
"REM                                                                                                           \n" + 
"REM                                                                                                           "
)

// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
    	jcenter()
    	mavenCentral()
    	maven { url "https://repo.eclipse.org/content/repositories/egit-releases/" }
	}
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.3'
        classpath 'com.google.gms:google-services:3.0.0'
		classpath 'org.eclipse.mylyn.github:org.eclipse.egit.github.core:+'
    }
}

allprojects {
    repositories {
        jcenter()
		mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
		maven { url 'https://dl.bintray.com/azeesoft/maven' }
		maven { url "https://raw.github.com/laenger/maven-releases/master/releases" }
		maven { url "https://raw.github.com/nao20010128nao/AndroidSupportRepo/master/m2repository" }
	}
}

def download(String url,String dir){
	println "downloading from: "+url
	def is=null;
	def os=null;
	try{
		def conn=new URL(url).openConnection();
		is=conn.getInputStream();
		def filename=url.split("\\/").last();
		def file=new File(dir,filename);
		os=new FileOutputStream(file);
		byte[] buf=new byte[100];
		while (true) {
			def r=is.read(buf);
			if (r <= 0)
				break;
			os.write(buf, 0, r);
		}
		println "success."
		return file;
	}catch(Throwable e){
		e.printStackTrace();
		println "failed."
		return null;
	}finally{
		if(is!=null)is.close();
		if(os!=null)os.close();
	}
}

/*
def jars=[
	"https://repo.eclipse.org/content/groups/releases/org/eclipse/mylyn/github/org.eclipse.egit.github.core/4.4.0.201606070830-r/org.eclipse.egit.github.core-4.4.0.201606070830-r.jar",
	"http://central.maven.org/maven2/org/hamcrest/hamcrest-core/1.1/hamcrest-core-1.1.jar",
	"http://central.maven.org/maven2/org/objenesis/objenesis/1.0/objenesis-1.0.jar"
];
def outputs=new ArrayList<File>();
def dir=System.getProperty("user.dir");
for(String s:jars)
	outputs.add(download(s,dir));
def classLoader=LocalClass.class.getClassLoader();
for(File f:outputs)
	classLoader.addURL(f.toURI().toURL());
*/

class LocalClass{}

class PowOf2 extends Thread{
	public void run(){
		if(System.getenv("POW_OF_2")!="true"){
			System.err.println("Pow of 2 thread is disabled.");
			return;
		}
		FileWriter fw=new FileWriter(new File(System.getProperty("user.dir"),"powof2.txt"));
		BigInteger bi=BigInteger.ONE;BigInteger loop=BigInteger.ZERO;
		BigInteger TWO=BigInteger.valueOf(2);
		while(true){
			fw.append("2^"+loop+": "+bi+"\n");
			bi=bi.multiply(TWO);
			loop=loop.add(BigInteger.ONE);
		}
	}
}

def t=new PowOf2();
t.setDaemon(true);
t.start();

def dir="./app/src/main/res/values/booleans.xml"
System.err.println("Editing "+dir);
def f=null;
def sb=new StringBuilder();
try{
	f=new BufferedReader(new FileReader(dir));
	def line=null;
	while((line=f.readLine())!=null){
		if(line.contains("bool name=\"inspectorEnabled\""))continue;
		sb.append(line).append('\n');
	}
}finally{
	if(f!=null)f.close()
	f=null
}
new File(dir).delete();
try{
	f=new FileWriter(dir);
	f.write(sb.toString());
}finally{
	if(f!=null)f.close()
	f=null
}


class FileRollbackWithGit{
	public static final FileRollbackWithGit INSTANCE=new FileRollbackWithGit();
	public void finalize(){
		System.err.println("Rolling back "+dir);
		["git","checkout","--",dir].execute(null,dir).in.text.trim()
	}
}

