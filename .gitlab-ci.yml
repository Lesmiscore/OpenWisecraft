image: "nao20010128nao/android-build:latest"

.artifacts: &artf
  artifacts:
    paths:
      - "*.apk"
      - dexdump*.txt
      - build-*.log
      - powof2.txt
      - "*/build/outputs/aar/*"
      - tree-*.log
      - "*/build/outputs/mapping/*/*.txt"
      - "*/build/generated/source/*"
      - "autogen-*.*"

.main_script: &scrpt
  script:
    - "gradle safeDeleteDevXml $TASK --info --stacktrace | tee -a build-$CI_BUILD_NAME.log > /dev/null"
    - mv */build/outputs/apk/*.apk .
    - ./ci/packageInformations.sh

.pre_script: &pre
  script:
    # Script for pre builds
    - DIR=`cat ./app/build.gradle | grep "def preNum="`
    - DIR=${DIR% //*}
    - "DIR=${DIR#*=}"
    - "if [ $DIR != \"0\" ]; then gradle safeDeleteDevXml $TASK --info --stacktrace | tee -a build-$CI_BUILD_NAME.log > /dev/null; mv */build/outputs/apk/*.apk . ; fi"
    - ./ci/packageInformations.sh

before_script:
  - chmod a+x ./ci/*
  - source ./ci/prepare.sh

stages:
  - app
  - rcon
  - postBuild

appDebug: &appDebug # Build for app debug APKs
  <<: *artf
  <<: *scrpt
  stage: app
  variables:
    TASK: ":app:assembleDebug"

appDebug2: &appDebug2 # Build for app debug APKs
  <<: *artf
  <<: *scrpt
  stage: app
  variables:
    TASK: ":app:assembleDebug2"

appDebug2TestObs: &appDebug2TestObs # Build for app debug APKs
  <<: *artf
  <<: *scrpt
  stage: app
  variables:
    TASK: ":app:assembleDebug2TestObs"

appPg: &appPg # Build for app debug(obfuscated) APKs
  <<: *artf
  <<: *scrpt
  stage: app
  variables:
    TASK: ":app:assemblePg"

appPgUlt: &appPgUlt # Build for app debug(obfuscated) APKs
  <<: *artf
  <<: *scrpt
  stage: app
  variables:
    TASK: ":app:assemblePgUlt"

appPgExperimental: &appPgExperimental # Build for app debug(obfuscated) APKs
  <<: *artf
  <<: *scrpt
  stage: app
  variables:
    TASK: ":app:assemblePgExperimental"

appRelease: &appRelese # Build for app release APKs
  <<: *artf
  <<: *scrpt
  stage: app
  variables:
    TASK: ":app:assembleRelease"

appShrinkRelease: &appShrinkRelease # Build for app release(obfuscated) APKs
  <<: *artf
  <<: *scrpt
  stage: app
  variables:
    TASK: ":app:assembleShrinkRelease"

appPre: &appPre # Build for app pre APKs
  <<: *artf
  <<: *pre
  stage: app
  # Because it needs conditions to run, we use pre instead
  variables:
    TASK: ":app:assemblePre"

appShrinkPre: &appShrinkPre # Build for app pre(obfuscated) APKs
  <<: *artf
  <<: *pre
  stage: app
  # Because it needs conditions to run, we use pre instead
  variables:
    TASK: ":app:assembleShrinkPre"

rconAppAll: &rconAppAll # Build for WRcon APKs
  <<: *artf
  <<: *scrpt
  stage: rcon
  variables:
    TASK: ":rconApp:build"

rconPassCrackAll: # Build for Rcon Password Cracker APKs
  <<: *artf
  <<: *scrpt
  stage: rcon
  variables:
    TASK: ":rconPassCrack:build"

mainLast:
  <<: *artf
  stage: postBuild
  script:
    - unzip app-release.apk -d unzippedApkA > /dev/null
    - $ANDROID_HOME/build-tools/25.0.0/dexdump -d unzippedApkA/classes.dex > dexdump-app.txt
    - unzip rconApp-release.apk -d unzippedApkB > /dev/null
    - $ANDROID_HOME/build-tools/25.0.0/dexdump -d unzippedApkB/classes.dex > dexdump-rcon.txt
    - unzip rconPassCrack-release.apk -d unzippedApkC > /dev/null
    - $ANDROID_HOME/build-tools/25.0.0/dexdump -d unzippedApkC/classes.dex > dexdump-rconPC.txt
    - unzip app-pg.apk -d unzippedApkD > /dev/null
    - $ANDROID_HOME/build-tools/25.0.0/dexdump -d unzippedApkD/classes.dex > dexdump-appObs.txt
    - grep "Git\sRevision" build-appDebug.log

copy:
  stage: postBuild
  script:
    - source ./ci/copy.sh


appDebugSplit:         *appDebug
appDebug2Split:        *appDebug2
appDebug2TestObsSplit: *appDebug2TestObs
appPgSplit:            *appPg
appPgUltSplit:         *appPgUlt
appPgExperimentalSplit: *appPgExperimental
appReleaseSplit:       *appRelese
appShrinkReleaseSplit: *appShrinkRelease
appPreSplit:           *appPre
appShrinkPreSplit:     *appShrinkPre
rconAppAllSplit:       *rconAppAll
